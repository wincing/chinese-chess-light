{"version":3,"sources":["assets\\scripts\\CheckerBoard.js"],"names":["cc","Class","Component","properties","upperLeftX","upperLeftY","broadSize","gridWall","type","Prefab","gridPath","createGrid","position","kind","newGrid","instantiate","flag","nums","node","addChild","setSiblingIndex","anchorX","anchorY","newPosition","parent","convertToNodeSpaceAR","setPosition","createMap","flags","getComponents","i","map","Array","y","gridSize","j","x","v2","data","start","gridNum"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;;;;AAoBAA,EAAE,CAACC,KAAH,CAAS;AACL,aAASD,EAAE,CAACE,SADP;AAGLC,EAAAA,UAAU,EAAE;AAERC,IAAAA,UAAU,EAAE,CAFJ;AAIRC,IAAAA,UAAU,EAAE,CAJJ;AAMRC,IAAAA,SAAS,EAAE,CANH;AAQRC,IAAAA,QAAQ,EAAE;AACN,iBAAS,IADH;AAENC,MAAAA,IAAI,EAAER,EAAE,CAACS;AAFH,KARF;AAaRC,IAAAA,QAAQ,EAAE;AACN,iBAAS,IADH;AAENF,MAAAA,IAAI,EAAER,EAAE,CAACS;AAFH;AAbF,GAHP;;AAsBL;;;;;;;AAOAE,EAAAA,UAAU,EAAE,oBAASC,QAAT,EAAmBC,IAAnB,EAAyB;AACjC,QAAIC,OAAO,GAAG,IAAd,CADiC,CAGjC;;AACA,YAAQD,IAAR;AACI,WAAK,CAAL;AACIC,QAAAA,OAAO,GAAGd,EAAE,CAACe,WAAH,CAAe,KAAKR,QAApB,CAAV;AACA;;AACJ,WAAK,CAAL;AACIO,QAAAA,OAAO,GAAGd,EAAE,CAACe,WAAH,CAAe,KAAKL,QAApB,CAAV;AACA;AANR,KAJiC,CAajC;;;AACAI,IAAAA,OAAO,CAACE,IAAR,GAAeH,IAAf;AACAC,IAAAA,OAAO,CAACG,IAAR,GAAe,CAAf;AAEA,SAAKC,IAAL,CAAUC,QAAV,CAAmBL,OAAnB,EAjBiC,CAmBjC;;AACAA,IAAAA,OAAO,CAACM,eAAR,CAAwB,CAAxB,EApBiC,CAsBjC;;AACAN,IAAAA,OAAO,CAACO,OAAR,GAAkB,CAAlB;AACAP,IAAAA,OAAO,CAACQ,OAAR,GAAkB,CAAlB,CAxBiC,CA0BjC;;AACA,QAAIC,WAAW,GAAGT,OAAO,CAACU,MAAR,CAAeC,oBAAf,CAAoCb,QAApC,CAAlB;AACAE,IAAAA,OAAO,CAACY,WAAR,CAAoBH,WAApB;AAEA,WAAOT,OAAP;AAEH,GA7DI;;AAgEL;;;AAGAa,EAAAA,SAAS,EAAE,qBAAW;AAClB,QAAIC,KAAK,GAAG,KAAKV,IAAL,CAAUW,aAAV,CAAwB7B,EAAE,CAACE,SAA3B,EAAsC,CAAtC,CAAZ,CADkB,CACoC;;AAEtD,SAAI,IAAI4B,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,EAAnB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,WAAKC,GAAL,CAASD,CAAT,IAAc,IAAIE,KAAJ,EAAd;AACA,UAAIC,CAAC,GAAG,KAAK5B,UAAL,GAAkByB,CAAC,GAAG,KAAKI,QAAnC;;AACA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,EAAnB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,YAAIC,CAAC,GAAG,KAAKhC,UAAL,GAAkB+B,CAAC,GAAG,KAAKD,QAAnC;AACA,aAAKH,GAAL,CAASD,CAAT,EAAYK,CAAZ,IAAiB,KAAKxB,UAAL,CAAgBX,EAAE,CAACqC,EAAH,CAAMD,CAAN,EAASH,CAAT,CAAhB,EAA6BL,KAAK,CAACU,IAAN,CAAWR,CAAX,EAAcK,CAAd,CAA7B,CAAjB;AACH;AACJ;AAEJ,GA/EI;AAiFLI,EAAAA,KAjFK,mBAiFI;AAEL,SAAKR,GAAL,GAAW,IAAIC,KAAJ,EAAX;AAEA,SAAKQ,OAAL,GAAe,EAAf;AAEA,SAAKN,QAAL,GAAgB,KAAK5B,SAAL,GAAe,KAAKkC,OAApC;AAEA,SAAKb,SAAL;AACH;AA1FI,CAAT","sourceRoot":"/","sourcesContent":["/**\n * 动态生成棋盘\n * @property {cc.Node} node 该脚本挂载的节点\n * \n * @property {Number} upperLeftX 棋盘左上角横坐标\n * \n * @property {Number} upperLeftY 棋盘左上角纵坐标\n * \n * @property {Number} broadSize 棋盘边长\n * \n * @property {cc.Prefab} gridWall 格子预制体资源-墙体\n * \n * @property {cc.Prefab} gridPath 格子预制体资源-路径\n * \n * @property {cc.Node[]} map 包含所有格子的数组\n * \n * @property {Number} gridNum 每边格子数--固定为10\n * \n * @property {Number} gridSize 格子大小\n */\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n\n        upperLeftX: 0, \n\n        upperLeftY: 0, \n\n        broadSize: 0,\n       \n        gridWall: {\n            default: null,\n            type: cc.Prefab\n        },\n\n        gridPath: {\n            default: null,\n            type: cc.Prefab\n        },              \n    },\n\n    /**\n     * 动态生成格子并将其添加到场景中\n     * \n     * @param {cc.V2} position 生成格子的位置\n     * @param {Boolean} kind 格子的类型\n     * @returns {Grid} 生成格子的引用\n     */\n    createGrid: function(position, kind) {\n        var newGrid = null;\n\n        // 根据格子种类生成节点\n        switch (kind) {\n            case 0:\n                newGrid = cc.instantiate(this.gridWall);\n                break;\n            case 1:\n                newGrid = cc.instantiate(this.gridPath);\n                break;\n        }\n\n        // 0为墙, 1为路, 2为灯, 3为受攻击\n        newGrid.flag = kind;\n        newGrid.nums = 0;\n\n        this.node.addChild(newGrid);\n\n        // 设置格子层级\n        newGrid.setSiblingIndex(2); \n\n        // 使每个格子以左上角为锚点\n        newGrid.anchorX = 0;\n        newGrid.anchorY = 1;\n        \n        // 设置格子位置\n        var newPosition = newGrid.parent.convertToNodeSpaceAR(position);\n        newGrid.setPosition(newPosition);\n\n        return newGrid;\n\n    },\n\n\n    /**\n     * 创建棋盘\n     */\n    createMap: function() {\n        var flags = this.node.getComponents(cc.Component)[1]; // 关卡数据脚本一定需挂在第3位置\n\n        for(var i = 0; i < 10; i++) {\n            this.map[i] = new Array();\n            var y = this.upperLeftY - i * this.gridSize;\n            for(var j = 0; j < 10; j++) {\n                var x = this.upperLeftX + j * this.gridSize;\n                this.map[i][j] = this.createGrid(cc.v2(x, y), flags.data[i][j]);\n            }\n        }\n\n    },\n\n    start () {\n\n        this.map = new Array();\n\n        this.gridNum = 10;\n \n        this.gridSize = this.broadSize/this.gridNum;\n\n        this.createMap();\n    },\n\n});\n"]}